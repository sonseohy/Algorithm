# RGB 거리
# RGB거리에는 집이 N개 있다. 거리는 선분으로 나타낼 수 있고, 1번 집부터 N번 집이 순서대로 있다.
# 집은 빨강, 초록, 파랑 중 하나의 색으로 칠해야 한다. 각각의 집을 빨강, 초록, 파랑으로 칠하는 비용이 주어졌을 때, 아래 규칙을 만족하면서 모든 집을 칠하는 비용의 최솟값을 구해보자.
# 규칙 : 1번 집의 색은 2번 집의 색과 같지 않아야 한다. N번 집의 색은 N-1번 집의 색과 같지 않아야 한다.
# i(2 ≤ i ≤ N-1)번 집의 색은 i-1번, i+1번 집의 색과 같지 않아야 한다.
N = int(input())
HOUSE = [list(map(int, input().split())) for _ in range(N)]

# 집마다 색깗별로 칠했을 때의 최소비용을 저장할 dp 생성
# 0: 빨강, 1: 초록, 2: 파랑
dp = [[0]*3 for _ in range(N)]

dp[0] = HOUSE[0]    # 첫번째 집을 칠하는 최소비용은 각 색상의 비용 그대로 넣어줌

for i in range(1, N):
    # i번째 집을 빨간색으로 칠할 때 최소 비용
    dp[i][0] = min(dp[i-1][1], dp[i-1][2]) + HOUSE[i][0]    # 이전 집의 색깔별 비용 중 빨간색을 제외한 색의 최소 비용 선택해 현재 집을 칠하는 비용과 더함
    # i번째 집을 초록색으로 칠할 때 최소 비용
    dp[i][1] = min(dp[i-1][0], dp[i-1][2]) + HOUSE[i][1]    # 이전 집의 색깔별 비용 중 초록색을 제외한 색의 최소 비용 선택해 현재 집을 칠하는 비용과 더함
    # i번째 집을 파란색으로 칠할 때 최소 비용
    dp[i][2] = min(dp[i-1][0], dp[i-1][1]) + HOUSE[i][2]    # 이전 집의 색깔별 비용 중 파란색을 제외한 색의 최소 비용 선택해 현재 집을 칠하는 비용과 더함

print(min(dp[N-1])) # 마지막 집을 칠한 비용 중 최소값 출력